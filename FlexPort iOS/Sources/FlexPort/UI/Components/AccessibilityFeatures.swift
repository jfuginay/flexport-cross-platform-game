import SwiftUI
import AVFoundation
import Accessibility

/// Comprehensive accessibility features for inclusive gaming
struct AccessibilityEnhancedGameView: View {\n    @StateObject private var accessibilityManager = AccessibilityManager()\n    @StateObject private var voiceOverManager = VoiceOverManager()\n    @State private var showingAccessibilitySettings = false\n    \n    let gameContent: AnyView\n    \n    init<Content: View>(@ViewBuilder content: () -> Content) {\n        self.gameContent = AnyView(content())\n    }\n    \n    var body: some View {\n        ZStack {\n            gameContent\n                .accessibilityElement(children: .contain)\n                .accessibilityAction(.default) {\n                    accessibilityManager.announceCurrentContext()\n                }\n                .accessibilityAction(.escape) {\n                    accessibilityManager.exitCurrentMode()\n                }\n                .accessibilityAction(named: \"Settings\") {\n                    showingAccessibilitySettings = true\n                }\n                .accessibilityAction(named: \"Read Map\") {\n                    voiceOverManager.describeMapContent()\n                }\n            \n            // Accessibility overlay\n            if accessibilityManager.isVoiceOverRunning {\n                AccessibilityOverlay()\n                    .allowsHitTesting(false)\n            }\n            \n            // High contrast mode overlay\n            if accessibilityManager.isHighContrastEnabled {\n                HighContrastOverlay()\n                    .allowsHitTesting(false)\n            }\n            \n            // Voice control indicators\n            if accessibilityManager.isVoiceControlActive {\n                VoiceControlIndicators()\n            }\n        }\n        .environmentObject(accessibilityManager)\n        .environmentObject(voiceOverManager)\n        .sheet(isPresented: $showingAccessibilitySettings) {\n            AccessibilitySettingsView()\n        }\n        .onAppear {\n            accessibilityManager.configureForGame()\n            voiceOverManager.setupGameAnnouncements()\n        }\n        .onChange(of: accessibilityManager.isVoiceOverRunning) { isRunning in\n            if isRunning {\n                voiceOverManager.announceGameStart()\n            }\n        }\n    }\n}\n\n// MARK: - Accessibility Manager\n\nclass AccessibilityManager: ObservableObject {\n    @Published var isVoiceOverRunning = false\n    @Published var isHighContrastEnabled = false\n    @Published var isReduceMotionEnabled = false\n    @Published var isVoiceControlActive = false\n    @Published var fontSize: AccessibilityFontSize = .medium\n    @Published var colorBlindnessType: ColorBlindnessType = .none\n    @Published var motorImpairmentAdaptations = false\n    @Published var audioDescriptionsEnabled = true\n    @Published var hapticIntensity: Float = 1.0\n    \n    private var accessibilityObserver: NSObjectProtocol?\n    \n    init() {\n        updateAccessibilityStatus()\n        setupAccessibilityNotifications()\n    }\n    \n    deinit {\n        if let observer = accessibilityObserver {\n            NotificationCenter.default.removeObserver(observer)\n        }\n    }\n    \n    private func setupAccessibilityNotifications() {\n        accessibilityObserver = NotificationCenter.default.addObserver(\n            forName: UIAccessibility.voiceOverStatusDidChangeNotification,\n            object: nil,\n            queue: .main\n        ) { [weak self] _ in\n            self?.updateAccessibilityStatus()\n        }\n    }\n    \n    private func updateAccessibilityStatus() {\n        isVoiceOverRunning = UIAccessibility.isVoiceOverRunning\n        isHighContrastEnabled = UIAccessibility.isDarkerSystemColorsEnabled || UIAccessibility.isInvertColorsEnabled\n        isReduceMotionEnabled = UIAccessibility.isReduceMotionEnabled\n        isVoiceControlActive = UIAccessibility.isVoiceControlEnabled\n    }\n    \n    func configureForGame() {\n        // Configure accessibility features specific to the game\n        if isVoiceOverRunning {\n            // Reduce visual complexity for voice over users\n            UIAccessibility.post(notification: .announcement, argument: \"FlexPort game loaded. Swipe to explore ports and ships.\")\n        }\n        \n        if isReduceMotionEnabled {\n            // Disable or reduce animations\n        }\n        \n        if motorImpairmentAdaptations {\n            // Enable larger touch targets and longer press durations\n        }\n    }\n    \n    func announceCurrentContext() {\n        // Announce current game context\n        let announcement = generateContextualAnnouncement()\n        UIAccessibility.post(notification: .announcement, argument: announcement)\n    }\n    \n    func exitCurrentMode() {\n        // Handle escape gesture\n        UIAccessibility.post(notification: .announcement, argument: \"Exiting current mode\")\n    }\n    \n    private func generateContextualAnnouncement() -> String {\n        // Generate contextual information based on current game state\n        return \"Game map view. Tap to explore ports and trade routes.\"\n    }\n}\n\n// MARK: - Voice Over Manager\n\nclass VoiceOverManager: ObservableObject {\n    private let speechSynthesizer = AVSpeechSynthesizer()\n    @Published var isSpeaking = false\n    \n    func setupGameAnnouncements() {\n        speechSynthesizer.delegate = self\n    }\n    \n    func announceGameStart() {\n        speak(\"Welcome to FlexPort. You are now viewing the world map with ports and shipping routes.\")\n    }\n    \n    func describeMapContent() {\n        let description = generateMapDescription()\n        speak(description)\n    }\n    \n    func announcePortSelection(_ portName: String, type: PortType) {\n        speak(\"Selected \\(portName), a \\(type.rawValue). Double tap to view details.\")\n    }\n    \n    func announceShipSelection(_ shipType: ShipType, location: String) {\n        speak(\"Selected \\(shipType.rawValue) ship near \\(location). Double tap to view details.\")\n    }\n    \n    func announceRouteCreation(from startPort: String, to endPort: String) {\n        speak(\"Creating trade route from \\(startPort) to \\(endPort).\")\n    }\n    \n    func announceGameProgress(money: Double, ships: Int, routes: Int) {\n        speak(\"Current status: \\(Int(money)) dollars, \\(ships) ships, \\(routes) active routes.\")\n    }\n    \n    private func speak(_ text: String) {\n        guard !text.isEmpty else { return }\n        \n        let utterance = AVSpeechUtterance(string: text)\n        utterance.rate = 0.5\n        utterance.volume = 0.8\n        utterance.voice = AVSpeechSynthesisVoice(language: \"en-US\")\n        \n        speechSynthesizer.speak(utterance)\n    }\n    \n    private func generateMapDescription() -> String {\n        // Generate description of current map state\n        return \"World map showing major shipping ports across continents. Swipe right to explore ports, swipe left to explore ships.\"\n    }\n}\n\nextension VoiceOverManager: AVSpeechSynthesizerDelegate {\n    func speechSynthesizer(_ synthesizer: AVSpeechSynthesizer, didStart utterance: AVSpeechUtterance) {\n        isSpeaking = true\n    }\n    \n    func speechSynthesizer(_ synthesizer: AVSpeechSynthesizer, didFinish utterance: AVSpeechUtterance) {\n        isSpeaking = false\n    }\n}\n\n// MARK: - Accessibility Overlay\n\nstruct AccessibilityOverlay: View {\n    @EnvironmentObject var accessibilityManager: AccessibilityManager\n    \n    var body: some View {\n        ZStack {\n            // Focus indicators\n            if accessibilityManager.isVoiceOverRunning {\n                FocusIndicators()\n            }\n            \n            // Audio cue indicators\n            AudioCueIndicators()\n        }\n    }\n}\n\nstruct FocusIndicators: View {\n    var body: some View {\n        // Visual indicators for VoiceOver focus\n        RoundedRectangle(cornerRadius: 8)\n            .stroke(Color.yellow, lineWidth: 4)\n            .fill(Color.yellow.opacity(0.1))\n            .frame(width: 60, height: 60)\n            .animation(.easeInOut(duration: 0.3), value: true)\n    }\n}\n\nstruct AudioCueIndicators: View {\n    @State private var isActive = false\n    \n    var body: some View {\n        VStack {\n            HStack {\n                Spacer()\n                \n                if isActive {\n                    Image(systemName: \"speaker.wave.2.fill\")\n                        .font(.title2)\n                        .foregroundColor(.blue)\n                        .padding()\n                        .background(Color.white.opacity(0.9))\n                        .clipShape(Circle())\n                        .shadow(radius: 4)\n                        .transition(.scale.combined(with: .opacity))\n                }\n            }\n            .padding()\n            \n            Spacer()\n        }\n    }\n}\n\n// MARK: - High Contrast Overlay\n\nstruct HighContrastOverlay: View {\n    var body: some View {\n        Rectangle()\n            .fill(.clear)\n            .background(\n                .ultraThinMaterial,\n                in: Rectangle()\n            )\n            .compositingGroup()\n            .blendMode(.difference)\n    }\n}\n\n// MARK: - Voice Control Indicators\n\nstruct VoiceControlIndicators: View {\n    @State private var isListening = false\n    \n    var body: some View {\n        VStack {\n            HStack {\n                if isListening {\n                    HStack(spacing: 8) {\n                        Image(systemName: \"mic.fill\")\n                            .font(.system(size: 16, weight: .semibold))\n                            .foregroundColor(.red)\n                        \n                        Text(\"Listening...\")\n                            .font(.caption)\n                            .fontWeight(.medium)\n                    }\n                    .padding(.horizontal, 12)\n                    .padding(.vertical, 6)\n                    .background(\n                        Capsule()\n                            .fill(.ultraThinMaterial)\n                    )\n                    .transition(.scale.combined(with: .opacity))\n                }\n                \n                Spacer()\n            }\n            .padding()\n            \n            Spacer()\n        }\n        .onAppear {\n            simulateVoiceControlActivity()\n        }\n    }\n    \n    private func simulateVoiceControlActivity() {\n        Timer.scheduledTimer(withTimeInterval: 3.0, repeats: true) { _ in\n            withAnimation(.easeInOut(duration: 0.3)) {\n                isListening.toggle()\n            }\n        }\n    }\n}\n\n// MARK: - Accessibility Settings\n\nstruct AccessibilitySettingsView: View {\n    @EnvironmentObject var accessibilityManager: AccessibilityManager\n    @Environment(\\.dismiss) var dismiss\n    \n    var body: some View {\n        NavigationView {\n            List {\n                Section(\"Visual Accessibility\") {\n                    HStack {\n                        Text(\"Font Size\")\n                        Spacer()\n                        Picker(\"Font Size\", selection: $accessibilityManager.fontSize) {\n                            ForEach(AccessibilityFontSize.allCases, id: \\.self) { size in\n                                Text(size.rawValue).tag(size)\n                            }\n                        }\n                        .pickerStyle(MenuPickerStyle())\n                    }\n                    .accessibilityElement(children: .combine)\n                    .accessibilityLabel(\"Font size setting\")\n                    \n                    HStack {\n                        Text(\"Color Blindness Support\")\n                        Spacer()\n                        Picker(\"Color Blindness\", selection: $accessibilityManager.colorBlindnessType) {\n                            ForEach(ColorBlindnessType.allCases, id: \\.self) { type in\n                                Text(type.rawValue).tag(type)\n                            }\n                        }\n                        .pickerStyle(MenuPickerStyle())\n                    }\n                    .accessibilityElement(children: .combine)\n                    .accessibilityLabel(\"Color blindness support setting\")\n                    \n                    PremiumToggle(\n                        \"High Contrast Mode\",\n                        isOn: $accessibilityManager.isHighContrastEnabled\n                    )\n                    .accessibilityHint(\"Increases visual contrast for better visibility\")\n                }\n                \n                Section(\"Motor Accessibility\") {\n                    PremiumToggle(\n                        \"Motor Impairment Adaptations\",\n                        isOn: $accessibilityManager.motorImpairmentAdaptations\n                    )\n                    .accessibilityHint(\"Enables larger touch targets and longer press durations\")\n                    \n                    VStack(alignment: .leading, spacing: 8) {\n                        Text(\"Haptic Feedback Intensity\")\n                            .font(.system(size: 16, weight: .medium))\n                        \n                        PremiumSlider(\n                            \"Haptic Intensity\",\n                            value: $accessibilityManager.hapticIntensity,\n                            in: 0...1\n                        )\n                        .accessibilityLabel(\"Haptic feedback intensity\")\n                        .accessibilityValue(\"\\(Int(accessibilityManager.hapticIntensity * 100)) percent\")\n                    }\n                }\n                \n                Section(\"Audio Accessibility\") {\n                    PremiumToggle(\n                        \"Audio Descriptions\",\n                        isOn: $accessibilityManager.audioDescriptionsEnabled\n                    )\n                    .accessibilityHint(\"Provides spoken descriptions of visual elements\")\n                }\n                \n                Section(\"Quick Actions\") {\n                    Button(\"Test Voice Announcements\") {\n                        testVoiceAnnouncements()\n                    }\n                    .accessibilityHint(\"Plays sample voice announcements to test audio\")\n                    \n                    Button(\"Test Haptic Feedback\") {\n                        testHapticFeedback()\n                    }\n                    .accessibilityHint(\"Plays sample haptic patterns to test feedback\")\n                    \n                    Button(\"Reset to Defaults\") {\n                        resetToDefaults()\n                    }\n                    .accessibilityHint(\"Resets all accessibility settings to default values\")\n                }\n            }\n            .navigationTitle(\"Accessibility\")\n            .navigationBarTitleDisplayMode(.large)\n            .toolbar {\n                ToolbarItem(placement: .navigationBarTrailing) {\n                    Button(\"Done\") {\n                        dismiss()\n                    }\n                }\n            }\n        }\n        .accessibilityRotor(\"Settings\") {\n            AccessibilityRotorEntry(\"Visual Settings\")\n            AccessibilityRotorEntry(\"Motor Settings\")\n            AccessibilityRotorEntry(\"Audio Settings\")\n            AccessibilityRotorEntry(\"Quick Actions\")\n        }\n    }\n    \n    private func testVoiceAnnouncements() {\n        UIAccessibility.post(\n            notification: .announcement,\n            argument: \"This is a test voice announcement. Audio descriptions are working correctly.\"\n        )\n    }\n    \n    private func testHapticFeedback() {\n        HapticManager.shared.setHapticIntensity(accessibilityManager.hapticIntensity)\n        HapticManager.shared.playImpactFeedback(.medium)\n        \n        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {\n            HapticManager.shared.playNotificationFeedback(.success)\n        }\n    }\n    \n    private func resetToDefaults() {\n        accessibilityManager.fontSize = .medium\n        accessibilityManager.colorBlindnessType = .none\n        accessibilityManager.isHighContrastEnabled = false\n        accessibilityManager.motorImpairmentAdaptations = false\n        accessibilityManager.audioDescriptionsEnabled = true\n        accessibilityManager.hapticIntensity = 1.0\n        \n        UIAccessibility.post(\n            notification: .announcement,\n            argument: \"Accessibility settings reset to defaults\"\n        )\n    }\n}\n\n// MARK: - Accessible Game Components\n\nstruct AccessiblePortMarker: View {\n    let port: EnhancedPort\n    let isSelected: Bool\n    let onSelect: () -> Void\n    let onDetails: () -> Void\n    \n    @EnvironmentObject var accessibilityManager: AccessibilityManager\n    @EnvironmentObject var voiceOverManager: VoiceOverManager\n    \n    var body: some View {\n        Button(action: onSelect) {\n            AdvancedPortMarker(\n                port: port,\n                isSelected: isSelected,\n                scale: 1.0,\n                onTap: onSelect,\n                onLongPress: onDetails\n            )\n        }\n        .accessibilityLabel(accessibilityLabel)\n        .accessibilityHint(accessibilityHint)\n        .accessibilityValue(accessibilityValue)\n        .accessibilityAction(.default) {\n            onSelect()\n            voiceOverManager.announcePortSelection(port.name, type: port.type)\n        }\n        .accessibilityAction(named: \"View Details\") {\n            onDetails()\n        }\n        .accessibilityAction(named: \"Create Route\") {\n            // Route creation action\n        }\n        .scaleEffect(accessibilityManager.motorImpairmentAdaptations ? 1.2 : 1.0)\n    }\n    \n    private var accessibilityLabel: String {\n        \"\\(port.name) port, \\(port.type.rawValue)\"\n    }\n    \n    private var accessibilityHint: String {\n        if isSelected {\n            return \"Selected port. Double tap to view details, or swipe up for route creation.\"\n        } else {\n            return \"Tap to select this port\"\n        }\n    }\n    \n    private var accessibilityValue: String {\n        let importance = Int(port.importance * 100)\n        let activity = Int(port.activity * 100)\n        return \"Importance \\(importance)%, Activity \\(activity)%\"\n    }\n}\n\nstruct AccessibleShipMarker: View {\n    let ship: ShipVisualization\n    let isSelected: Bool\n    let onSelect: () -> Void\n    \n    @EnvironmentObject var voiceOverManager: VoiceOverManager\n    \n    var body: some View {\n        Button(action: onSelect) {\n            AdvancedShipMarker(\n                ship: ship,\n                isSelected: isSelected,\n                scale: 1.0,\n                onTap: onSelect\n            )\n        }\n        .accessibilityLabel(\"\\(ship.shipType.rawValue) ship\")\n        .accessibilityHint(\"Tap to select this ship\")\n        .accessibilityValue(\"Progress \\(Int(ship.progress * 100))%\")\n        .accessibilityAction(.default) {\n            onSelect()\n            voiceOverManager.announceShipSelection(ship.shipType, location: \"current position\")\n        }\n    }\n}\n\n// MARK: - Accessibility Extensions\n\nextension View {\n    func accessibleGameElement(\n        label: String,\n        hint: String? = nil,\n        value: String? = nil,\n        actions: [AccessibilityActionInfo] = []\n    ) -> some View {\n        self\n            .accessibilityElement(children: .ignore)\n            .accessibilityLabel(label)\n            .accessibilityHint(hint ?? \"\")\n            .accessibilityValue(value ?? \"\")\n            .modifier(AccessibilityActionsModifier(actions: actions))\n    }\n}\n\nstruct AccessibilityActionsModifier: ViewModifier {\n    let actions: [AccessibilityActionInfo]\n    \n    func body(content: Content) -> some View {\n        var modifiedContent = content\n        \n        for action in actions {\n            modifiedContent = modifiedContent\n                .accessibilityAction(named: action.name) {\n                    action.action()\n                }\n        }\n        \n        return modifiedContent\n    }\n}\n\nstruct AccessibilityActionInfo {\n    let name: String\n    let action: () -> Void\n}\n\n// MARK: - Supporting Types\n\nenum AccessibilityFontSize: String, CaseIterable {\n    case small = \"Small\"\n    case medium = \"Medium\"\n    case large = \"Large\"\n    case extraLarge = \"Extra Large\"\n}\n\nenum ColorBlindnessType: String, CaseIterable {\n    case none = \"None\"\n    case protanopia = \"Protanopia (Red-blind)\"\n    case deuteranopia = \"Deuteranopia (Green-blind)\"\n    case tritanopia = \"Tritanopia (Blue-blind)\"\n    case achromatopsia = \"Achromatopsia (Color-blind)\"\n}\n\n// MARK: - Color Blindness Support\n\nstruct ColorBlindnessFilter: ViewModifier {\n    let type: ColorBlindnessType\n    \n    func body(content: Content) -> some View {\n        switch type {\n        case .none:\n            content\n        case .protanopia:\n            content.colorMultiply(Color(red: 0.567, green: 0.433, blue: 0))\n        case .deuteranopia:\n            content.colorMultiply(Color(red: 0.625, green: 0.375, blue: 0))\n        case .tritanopia:\n            content.colorMultiply(Color(red: 0.95, green: 0.05, blue: 0))\n        case .achromatopsia:\n            content.grayscale(1.0)\n        }\n    }\n}\n\nextension View {\n    func colorBlindnessFilter(_ type: ColorBlindnessType) -> some View {\n        modifier(ColorBlindnessFilter(type: type))\n    }\n}\n\n// MARK: - Motor Impairment Adaptations\n\nstruct MotorAdaptedButton<Content: View>: View {\n    let content: Content\n    let action: () -> Void\n    let minimumTouchTarget: CGFloat = 44\n    \n    @EnvironmentObject var accessibilityManager: AccessibilityManager\n    \n    init(action: @escaping () -> Void, @ViewBuilder content: () -> Content) {\n        self.action = action\n        self.content = content()\n    }\n    \n    var body: some View {\n        Button(action: action) {\n            content\n                .frame(minWidth: minimumTouchTarget, minHeight: minimumTouchTarget)\n        }\n        .scaleEffect(accessibilityManager.motorImpairmentAdaptations ? 1.2 : 1.0)\n        .animation(.easeInOut(duration: 0.2), value: accessibilityManager.motorImpairmentAdaptations)\n    }\n}\n\n// MARK: - Accessibility Announcements\n\nstruct AccessibilityAnnouncement {\n    static func announceGameStateChange(\n        money: Double,\n        ships: Int,\n        routes: Int,\n        reputation: Double\n    ) {\n        let announcement = \"Game state updated. Money: \\(Int(money)) dollars. Ships: \\(ships). Active routes: \\(routes). Reputation: \\(Int(reputation))%.\"\n        UIAccessibility.post(notification: .announcement, argument: announcement)\n    }\n    \n    static func announceNewShipPurchased(_ shipName: String, cost: Double) {\n        let announcement = \"New ship purchased: \\(shipName) for \\(Int(cost)) dollars.\"\n        UIAccessibility.post(notification: .announcement, argument: announcement)\n    }\n    \n    static func announceRouteCompleted(from startPort: String, to endPort: String, profit: Double) {\n        let announcement = \"Trade route completed from \\(startPort) to \\(endPort). Profit: \\(Int(profit)) dollars.\"\n        UIAccessibility.post(notification: .announcement, argument: announcement)\n    }\n    \n    static func announceError(_ message: String) {\n        UIAccessibility.post(notification: .announcement, argument: \"Error: \\(message)\")\n    }\n    \n    static func announceSuccess(_ message: String) {\n        UIAccessibility.post(notification: .announcement, argument: \"Success: \\(message)\")\n    }\n}