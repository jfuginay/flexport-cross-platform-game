package com.flexport.game.integration

import com.flexport.ai.integration.GameIntegrationBridge
import com.flexport.economics.EconomicEngine
import com.flexport.game.ecs.EntityManager
import com.flexport.game.ecs.ComponentManager
import com.flexport.game.ecs.Entity
import com.flexport.game.ecs.ECSManager
import com.flexport.game.ecs.systems.*
import com.flexport.game.models.*
import com.flexport.input.TouchInputManager
import com.flexport.ecs.systems.TouchInputSystem
import kotlinx.coroutines.*
import kotlinx.coroutines.flow.collect

/**
 * Integration test class to verify all systems work together
 */
class GameIntegrationTest {
    
    private lateinit var ecsManager: ECSManager
    private lateinit var economicEngine: EconomicEngine
    private lateinit var gameIntegrationBridge: GameIntegrationBridge
    private lateinit var touchInputManager: TouchInputManager
    
    private val testScope = CoroutineScope(Dispatchers.Default + SupervisorJob())
    
    /**
     * Initialize all game systems
     */
    suspend fun initializeGameSystems() {
        println("=== FlexPort Game Integration Test ===")
        println("Initializing game systems...")
        
        // 1. Initialize ECS Manager
        ecsManager = ECSManager()
        println("✓ ECS Manager initialized")
        
        // 2. Initialize Economic Engine
        economicEngine = EconomicEngine()
        economicEngine.initialize()
        println("✓ Economic Engine initialized")
        
        // 3. Initialize Touch Input Manager
        touchInputManager = TouchInputManager()
        println("✓ Touch Input Manager initialized")
        
        // 4. Add Touch Input System to ECS
        val entityManager = createEntityManagerAdapter()
        val touchInputSystem = TouchInputSystem(entityManager, touchInputManager)
        ecsManager.addSystem(touchInputSystem)
        println("✓ Touch Input System added to ECS")
        
        // 5. Initialize Game Integration Bridge (AI ↔ Economics ↔ ECS)
        gameIntegrationBridge = GameIntegrationBridge(economicEngine, entityManager)
        gameIntegrationBridge.initialize()
        println("✓ Game Integration Bridge initialized")
        
        // 6. Start ECS game loop
        ecsManager.start()
        println("✓ ECS game loop started")
        
        println("\nAll systems initialized successfully!")
    }
    
    /**
     * Test Economics → ECS entity updates
     */
    fun testEconomicsToECS() {
        println("\n--- Testing Economics → ECS Integration ---")
        
        // Create a ship entity
        val ship = Ship(
            id = "test_ship_1",
            name = "Test Cargo Ship",
            type = ShipType.CARGO_SHIP,
            capacity = 50000,
            speed = 20.0,
            fuelLevel = 80.0,
            condition = 95.0,
            fuelEfficiency = 0.5,
            purchasePrice = 10000000.0,
            maintenanceCost = 5000.0,
            currentPosition = GeographicalPosition(40.7128, -74.0060),
            currentCargo = emptyList()
        )
        
        val shipEntity = ecsManager.createShipEntity(
            ship = ship,
            playerId = "player1"
        )
        
        println("Created ship entity: ${shipEntity.id}")
        
        // Verify economic component (temporarily commented out due to missing EconomicComponent import)
        // val economicComponent = ecsManager.getComponent(shipEntity, EconomicComponent::class)
        // println("Ship economic value: $${economicComponent?.value}")
        // println("Ship maintenance cost: $${economicComponent?.maintenanceCost}/hour")
        
        // Create a port entity
        val port = Port(
            id = "port_ny",
            name = "Port of New York",
            position = GeographicalPosition(40.7128, -74.0060),
            type = PortType.SEA,
            capacity = 100,
            dockingFee = 5000.0,
            isOperational = true
        )
        
        val portEntity = ecsManager.createPortEntity(port)
        println("Created port entity: ${portEntity.id}")
    }
    
    /**
     * Test AI → Economics market impacts
     */
    suspend fun testAIToEconomics() {
        println("\n--- Testing AI → Economics Integration ---")
        
        // Monitor AI economic impacts
        testScope.launch {
            gameIntegrationBridge.gameStateUpdates.collect { update ->
                when (update.type) {
                    com.flexport.ai.integration.GameStateUpdateType.ECONOMIC_IMPACT -> {
                        println("AI Economic Impact: ${update.description}")
                        update.data.forEach { (key, value) ->
                            println("  $key: $value")
                        }
                    }
                    else -> {}
                }
            }
        }
        
        // Simulate AI progression
        println("Advancing AI singularity phase...")
        gameIntegrationBridge.forcePhaseAdvancement()
        
        delay(1000) // Wait for events to propagate
        
        // Check AI system status
        val aiStatus = gameIntegrationBridge.getSystemStatus()
        println("AI Singularity Progress: ${aiStatus?.progression?.overallProgress}")
        println("Current Phase: ${aiStatus?.progression?.currentPhase?.displayName}")
    }
    
    /**
     * Test Assets → ECS entity creation
     */
    fun testAssetsToECS() {
        println("\n--- Testing Assets → ECS Integration ---")
        
        // Create multiple ship assets
        val shipTypes = listOf(ShipType.CARGO_SHIP, ShipType.CONTAINER_SHIP, ShipType.CARGO_PLANE)
        val ships = shipTypes.mapIndexed { index, type ->
            val ship = Ship(
                id = "ship_${type.name.lowercase()}_$index",
                name = "${type.name.replace("_", " ").lowercase().replaceFirstChar { it.uppercase() }} ${index + 1}",
                type = type,
                capacity = when (type) {
                    ShipType.CARGO_SHIP -> 50000
                    ShipType.CONTAINER_SHIP -> 60000
                    ShipType.CARGO_PLANE -> 20000
                    ShipType.FREIGHT_TRAIN -> 80000
                },
                speed = when (type) {
                    ShipType.CARGO_SHIP -> 18.0
                    ShipType.CONTAINER_SHIP -> 22.0
                    ShipType.CARGO_PLANE -> 500.0
                    ShipType.FREIGHT_TRAIN -> 50.0
                },
                fuelLevel = 100.0,
                condition = 100.0,
                fuelEfficiency = 0.5,
                purchasePrice = when (type) {
                    ShipType.CARGO_SHIP -> 10000000.0
                    ShipType.CONTAINER_SHIP -> 12000000.0
                    ShipType.CARGO_PLANE -> 50000000.0
                    ShipType.FREIGHT_TRAIN -> 5000000.0
                },
                maintenanceCost = 5000.0,
                currentPosition = GeographicalPosition(
                    40.0 + index * 5.0,
                    -74.0 + index * 5.0
                ),
                currentCargo = emptyList()
            )
            
            ecsManager.createShipEntity(
                ship = ship,
                playerId = "player1"
            )
        }
        
        println("Created ${ships.size} ship entities from assets")
        println("Total entities in ECS: ${ecsManager.entityCount.value}")
    }
    
    /**
     * Test Input → ECS entity selection
     */
    suspend fun testInputToECS() {
        println("\n--- Testing Input → ECS Integration ---")
        
        // Simulate touch input on an entity
        val testPosition = com.flexport.rendering.math.Vector2(100f, 100f)
        
        println("Simulating tap at position: $testPosition")
        touchInputManager.simulateTap(testPosition.x, testPosition.y)
        
        delay(100) // Wait for input processing
        
        // Check if entity was selected (temporarily commented out due to missing SelectableComponent)
        // val selectedEntities = ecsManager.getAllEntities().filter { entity ->
        //     val selectable = ecsManager.getComponent(entity, com.flexport.ecs.components.SelectableComponent::class)
        //     selectable?.isSelected() == true
        // }
        val selectedEntities = emptyList<Entity>()
        
        println("Selected entities: ${selectedEntities.size}")
    }
    
    /**
     * Test all systems working together
     */
    suspend fun testFullIntegration() {
        println("\n--- Testing Full System Integration ---")
        
        // Create a complete game scenario
        println("Setting up game world...")
        
        // 1. Create ports around the world
        val ports = listOf(
            Port("port_ny", "New York", GeographicalPosition(40.7128, -74.0060), PortType.SEA, 100, emptyMap(), emptyMap(), 5000.0),
            Port("port_london", "London", GeographicalPosition(51.5074, -0.1278), PortType.SEA, 80, emptyMap(), emptyMap(), 4500.0),
            Port("port_shanghai", "Shanghai", GeographicalPosition(31.2304, 121.4737), PortType.SEA, 120, emptyMap(), emptyMap(), 6000.0),
            Port("port_singapore", "Singapore", GeographicalPosition(1.3521, 103.8198), PortType.MULTIMODAL, 150, emptyMap(), emptyMap(), 7000.0)
        )
        
        ports.forEach { port ->
            ecsManager.createPortEntity(port)
            println("Created port: ${port.name}")
        }
        
        // 2. Create a fleet of ships
        val fleet = (1..3).map { i ->
            val ship = Ship(
                id = "fleet_ship_$i",
                name = "Fleet Ship $i",
                type = ShipType.CARGO_SHIP,
                capacity = 50000,
                speed = 20.0,
                fuelLevel = 100.0,
                condition = 100.0,
                fuelEfficiency = 0.5,
                purchasePrice = 10000000.0,
                maintenanceCost = 5000.0,
                currentPosition = ports[i % ports.size].position,
                currentCargo = emptyList() // Simplified for now
            )
            
            ecsManager.createShipEntity(
                ship = ship,
                playerId = "player1"
            )
        }
        
        println("Created fleet of ${fleet.size} ships")
        
        // 3. Set ships to move between ports
        fleet.forEachIndexed { index, shipEntity ->
            val movement = ecsManager.getComponent(shipEntity, MovementComponent::class)
            val targetPort = ports[(index + 1) % ports.size]
            
            movement?.let {
                val updatedMovement = it.copy(
                    targetPosition = targetPort.position,
                    isMoving = true,
                    currentSpeed = it.maxSpeed
                )
                ecsManager.removeComponent(shipEntity, MovementComponent::class)
                ecsManager.addComponent(shipEntity, updatedMovement)
                println("Ship ${shipEntity.id} navigating to ${targetPort.name}")
            }
        }
        
        // 4. Monitor system activity
        println("\nMonitoring system activity for 5 seconds...")
        
        repeat(5) {
            delay(1000)
            
            // Check ECS stats
            val stats = ecsManager.getStats()
            println("\nTime: ${it + 1}s")
            println("ECS Stats - Entities: ${stats.entityCount}, Components: ${stats.componentCount}")
            println("Frame time: ${stats.frameTimeMs}ms")
            
            // Check economic activity
            val economicSystem = ecsManager.getSystem<EconomicSystem>()
            economicSystem?.economicEvents?.value?.forEach { event ->
                println("Economic Event: ${event.type} - ${event.description} ($${event.amount})")
            }
            
            // Check AI status
            val aiStatus = gameIntegrationBridge.getSystemStatus()
            println("AI Status: Phase ${aiStatus?.progression?.currentPhase?.displayName}, Progress: ${aiStatus?.progression?.overallProgress}")
        }
    }
    
    /**
     * Create an adapter for EntityManager compatibility
     */
    private fun createEntityManagerAdapter(): com.flexport.ecs.core.EntityManager {
        return object : com.flexport.ecs.core.EntityManager() {
            override fun createEntity(id: String): com.flexport.ecs.core.Entity {
                val ecsEntity = ecsManager.createEntity(id)
                return com.flexport.ecs.core.Entity(ecsEntity.id, this)
            }
            
            override fun destroyEntity(entity: com.flexport.ecs.core.Entity) {
                val ecsEntity = ecsManager.getEntity(entity.id)
                ecsEntity?.let { ecsManager.destroyEntity(it) }
            }
            
            override fun getAllEntities(): List<com.flexport.ecs.core.Entity> {
                return ecsManager.getAllEntities().map { 
                    com.flexport.ecs.core.Entity(it.id)
                }
            }
            
            override fun <T : com.flexport.game.ecs.Component> addComponent(
                entity: com.flexport.ecs.core.Entity, 
                component: T
            ) {
                val ecsEntity = ecsManager.getEntity(entity.id) ?: return
                ecsManager.addComponent(ecsEntity, component)
            }
            
            override fun <T : com.flexport.game.ecs.Component> getComponent(
                entity: com.flexport.ecs.core.Entity,
                componentClass: kotlin.reflect.KClass<T>
            ): T? {
                val ecsEntity = ecsManager.getEntity(entity.id) ?: return null
                return ecsManager.getComponent(ecsEntity, componentClass)
            }
            
            override fun <T : com.flexport.game.ecs.Component> removeComponent(
                entity: com.flexport.ecs.core.Entity,
                componentClass: kotlin.reflect.KClass<T>
            ) {
                val ecsEntity = ecsManager.getEntity(entity.id) ?: return
                ecsManager.removeComponent(ecsEntity, componentClass)
            }
            
            override fun <T : com.flexport.game.ecs.Component> hasComponent(
                entity: com.flexport.ecs.core.Entity,
                componentClass: kotlin.reflect.KClass<T>
            ): Boolean {
                val ecsEntity = ecsManager.getEntity(entity.id) ?: return false
                return ecsManager.hasComponent(ecsEntity, componentClass)
            }
        }
    }
    
    /**
     * Cleanup all systems
     */
    fun cleanup() {
        println("\n--- Cleaning up game systems ---")
        
        ecsManager.cleanup()
        gameIntegrationBridge.shutdown()
        testScope.cancel()
        
        println("All systems cleaned up successfully!")
    }
}

/**
 * Main function to run the integration test
 */
suspend fun main() {
    val integrationTest = GameIntegrationTest()
    
    try {
        // Initialize all systems
        integrationTest.initializeGameSystems()
        
        // Run individual integration tests
        integrationTest.testEconomicsToECS()
        integrationTest.testAIToEconomics()
        integrationTest.testAssetsToECS()
        integrationTest.testInputToECS()
        
        // Run full integration test
        integrationTest.testFullIntegration()
        
    } catch (e: Exception) {
        println("Integration test failed: ${e.message}")
        e.printStackTrace()
    } finally {
        // Clean up
        integrationTest.cleanup()
    }
}