package com.flexport.game.integration

import com.flexport.ai.integration.GameIntegrationBridge
import com.flexport.economics.EconomicEngine
import com.flexport.game.ecs.ECSManager
import com.flexport.input.TouchInputManager
import kotlinx.coroutines.*

/**
 * Final build test to ensure all systems compile and initialize properly
 */
class FinalBuildTest {
    
    companion object {
        @JvmStatic
        fun main(args: Array<String>) {
            runBlocking {
                println("=== FlexPort Final Build Test ===")
                
                try {
                    // Test 1: Initialize core systems
                    println("\n1. Testing Core System Initialization...")
                    val ecsManager = ECSManager()
                    println("   ✓ ECS Manager created")
                    
                    val economicEngine = EconomicEngine()
                    economicEngine.initialize()
                    println("   ✓ Economic Engine initialized")
                    
                    val touchInputManager = TouchInputManager()
                    println("   ✓ Touch Input Manager created")
                    
                    // Test 2: Test integration bridge
                    println("\n2. Testing Integration Bridge...")
                    val gameIntegrationBridge = GameIntegrationBridge(economicEngine, null)
                    gameIntegrationBridge.initialize()
                    println("   ✓ Game Integration Bridge initialized")
                    
                    // Test 3: Create test entities
                    println("\n3. Testing Entity Creation...")
                    val testShip = com.flexport.game.models.Ship(
                        id = "test_ship",
                        name = "Test Ship",
                        type = com.flexport.game.models.ShipType.CARGO_SHIP,
                        capacity = 50000,
                        speed = 20.0,
                        fuelLevel = 100.0,
                        condition = 100.0,
                        fuelEfficiency = 0.5,
                        purchasePrice = 10000000.0,
                        maintenanceCost = 5000.0,
                        currentPosition = com.flexport.game.models.GeographicalPosition(0.0, 0.0),
                        currentCargo = emptyList()
                    )
                    
                    val shipEntity = ecsManager.createShipEntity(
                        ship = testShip,
                        playerId = "player1"
                    )
                    println("   ✓ Ship entity created: ${shipEntity.id}")
                    
                    val testPort = com.flexport.game.models.Port(
                        id = "test_port",
                        name = "Test Port",
                        position = com.flexport.game.models.GeographicalPosition(0.0, 0.0),
                        type = com.flexport.game.models.PortType.SEA,
                        capacity = 100,
                        dockingFee = 5000.0,
                        isOperational = true
                    )
                    
                    val portEntity = ecsManager.createPortEntity(testPort)
                    println("   ✓ Port entity created: ${portEntity.id}")
                    
                    // Test 4: Start and stop systems
                    println("\n4. Testing System Lifecycle...")
                    ecsManager.start()
                    println("   ✓ ECS Manager started")
                    
                    delay(100) // Let it run briefly
                    
                    ecsManager.stop()
                    println("   ✓ ECS Manager stopped")
                    
                    // Test 5: Check system stats
                    println("\n5. Testing System Stats...")
                    val stats = ecsManager.getStats()
                    println("   Entities: ${stats.entityCount}")
                    println("   Components: ${stats.componentCount}")
                    println("   Systems: ${stats.systemCount}")
                    
                    // Test 6: Test AI singularity status
                    println("\n6. Testing AI System...")
                    val aiStatus = gameIntegrationBridge.getSystemStatus()
                    println("   AI Phase: ${aiStatus?.progression?.currentPhase?.displayName ?: "Not initialized"}")
                    println("   AI Progress: ${aiStatus?.progression?.overallProgress ?: 0.0}")
                    
                    // Test 7: Cleanup
                    println("\n7. Testing Cleanup...")
                    ecsManager.cleanup()
                    gameIntegrationBridge.shutdown()
                    touchInputManager.dispose()
                    println("   ✓ All systems cleaned up")
                    
                    println("\n=== ALL TESTS PASSED ===")
                    println("FlexPort game systems are ready for compilation!")
                    
                } catch (e: Exception) {
                    println("\n!!! TEST FAILED !!!")
                    println("Error: ${e.message}")
                    e.printStackTrace()
                }
            }
        }
    }
}